//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""a11f1fc1-39ca-47ac-be80-a6858f8d3efc"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""8a89babe-540d-41e5-b476-cfa47e8c5a9c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7d9868f1-84e5-490b-b8ec-955ffcb94675"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f78979e1-dee7-4435-a91d-4f4994a0e676"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""0d899c75-ca12-4880-8c5a-d90bec5f3270"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""12645430-9898-4f9b-b3f7-7059fa7fb9d4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""95a6aa5d-adcd-4085-94c2-3f62c9c2cefe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""eab31ef2-ffcd-43ce-85f9-3cb3b79d1509"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2a45b6c9-43f5-4655-be06-c7d8403a2c53"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fb0829d7-28f0-4e7d-825b-c49ea2f0cec3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9594dc62-0ca4-47d5-a053-b2164333a3c1"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b6ea535-9a9b-4fc0-8477-8cc5f50b7d4a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab89e5ff-4ea1-4afd-8537-2a7ec1239f21"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70964ecb-ff72-4b7e-ab42-14761d9aa611"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5a14291-960b-4971-a0e6-57d7ddd49400"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interractions"",
            ""id"": ""150d1a19-5a85-4bc3-af39-7f287faa3f01"",
            ""actions"": [
                {
                    ""name"": ""Lick"",
                    ""type"": ""Button"",
                    ""id"": ""77e1aae4-5796-4db8-8d92-d9410be48c8f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sleep"",
                    ""type"": ""Button"",
                    ""id"": ""0d696a51-529f-470b-bd51-e035b19018b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speek"",
                    ""type"": ""Button"",
                    ""id"": ""ba6fb76b-237f-4691-8a0e-b81f7ee2984f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdf997df-8933-45d9-911a-984b60c0c4da"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6a5b8e-6b90-4f59-98a3-245be50c2b88"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb31bf4-8948-4f69-ade6-b1bc34534e54"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sleep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4660348-eb1b-4478-bf16-0141e59e1ac8"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sleep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4094d07-c75b-4dce-85dd-5a8c610e4f17"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speek"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3871ec9a-4a74-4f5d-bf91-ac64ff27fdc3"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speek"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Horizontal = m_Movement.FindAction("Horizontal", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
        // Interractions
        m_Interractions = asset.FindActionMap("Interractions", throwIfNotFound: true);
        m_Interractions_Lick = m_Interractions.FindAction("Lick", throwIfNotFound: true);
        m_Interractions_Sleep = m_Interractions.FindAction("Sleep", throwIfNotFound: true);
        m_Interractions_Speek = m_Interractions.FindAction("Speek", throwIfNotFound: true);
    }

    ~@PlayerAction()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, PlayerAction.Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Interractions.enabled, "This will cause a leak and performance issues, PlayerAction.Interractions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Horizontal;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Run;
    public struct MovementActions
    {
        private @PlayerAction m_Wrapper;
        public MovementActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Movement_Horizontal;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Run => m_Wrapper.m_Movement_Run;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Interractions
    private readonly InputActionMap m_Interractions;
    private List<IInterractionsActions> m_InterractionsActionsCallbackInterfaces = new List<IInterractionsActions>();
    private readonly InputAction m_Interractions_Lick;
    private readonly InputAction m_Interractions_Sleep;
    private readonly InputAction m_Interractions_Speek;
    public struct InterractionsActions
    {
        private @PlayerAction m_Wrapper;
        public InterractionsActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lick => m_Wrapper.m_Interractions_Lick;
        public InputAction @Sleep => m_Wrapper.m_Interractions_Sleep;
        public InputAction @Speek => m_Wrapper.m_Interractions_Speek;
        public InputActionMap Get() { return m_Wrapper.m_Interractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InterractionsActions set) { return set.Get(); }
        public void AddCallbacks(IInterractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InterractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InterractionsActionsCallbackInterfaces.Add(instance);
            @Lick.started += instance.OnLick;
            @Lick.performed += instance.OnLick;
            @Lick.canceled += instance.OnLick;
            @Sleep.started += instance.OnSleep;
            @Sleep.performed += instance.OnSleep;
            @Sleep.canceled += instance.OnSleep;
            @Speek.started += instance.OnSpeek;
            @Speek.performed += instance.OnSpeek;
            @Speek.canceled += instance.OnSpeek;
        }

        private void UnregisterCallbacks(IInterractionsActions instance)
        {
            @Lick.started -= instance.OnLick;
            @Lick.performed -= instance.OnLick;
            @Lick.canceled -= instance.OnLick;
            @Sleep.started -= instance.OnSleep;
            @Sleep.performed -= instance.OnSleep;
            @Sleep.canceled -= instance.OnSleep;
            @Speek.started -= instance.OnSpeek;
            @Speek.performed -= instance.OnSpeek;
            @Speek.canceled -= instance.OnSpeek;
        }

        public void RemoveCallbacks(IInterractionsActions instance)
        {
            if (m_Wrapper.m_InterractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInterractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InterractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InterractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InterractionsActions @Interractions => new InterractionsActions(this);
    public interface IMovementActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IInterractionsActions
    {
        void OnLick(InputAction.CallbackContext context);
        void OnSleep(InputAction.CallbackContext context);
        void OnSpeek(InputAction.CallbackContext context);
    }
}
